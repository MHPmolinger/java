package com.neusoft;

public class LearnOop {
/*
package com.dongruan.learnoop;

public class LearnOop {
/**
 * 1、多态：1.首先多态是发生在继承的基础上而言的 2.父类类型引用 承接子类实例化对象
 * 2、为什么要使用多态
 * 3、多态的好处：多态与继承的结合可以协助我们降低代码之间的耦合程度  有利于后期的维护以及更新
 * 4、多态又称之为向上转型   
 * 5、什么是向下转型（又称之为 强制类型转换）:所谓向下转型 就是   将之前 多态形式得到的对象  向子类 类型转型的过程 叫做  向下转型 （强制类型转换）
 * 6、向下转型的原因？因为 父类引用 无法直接调用子类中特有的方法  
 * 7、向下转型需要注意的事项：  不可以随便乱转  通过多态得到的  父类引用向下转型过程中 还是要遵循 之前创建这个对象时候  创建对象的本质
 *   否则会报造型异常的 错误 java.lang.ClassCastException
 * 8、进行向下转换  语法 规则：
 *       定义 子类引用 = （子类类名称）多态得到的父类引用；
 *     强制类型转换 一定是发生在多态的基础之上   
 * 9、Java中的数据类型 ：
		
/**
 * Homework：
设计四个类，分别如下： 
1、
    设计Shape表示图形类，有面积属性area、周长属性per，颜色属性color，有两个构造方法（一个是默认的、一个是为颜色赋值的），还有3个抽象方法，、
    分别是：getArea计算面积、getPer计算周长、showAll输出所有信息，还有一个求颜色的方法getColor。
    设计 2个子类：
  Rectangle表示矩形类，增加两个属性，Width表示长度、height表示宽度，重写getPer、getArea和showAll三个方法，另外又增加一个构造方法
  （一个是默认的、一个是为高度、宽度、颜色赋值的）；
  Circle表示圆类，增加1个属性，radius表示半径，重写getPer、getArea和showAll三个方法，另外又增加两个构造方法（为半径、颜色赋值的）；
     测试类中，在main方法中，声明创建每个子类的对象，并调用2个子类的showAll方法；
2、 Cola公司的雇员分为以下若干类：
   ColaEmployee ：这是所有员工总的父类，属性：员工的姓名,员工的生日月份。方法：getSalary(int month) 根据参数月份来确定工资，
   如果该月员工过生日，则公司会额外奖励100 元；
   SalariedEmployee ：	ColaEmployee 的子类，拿固定工资的员工。属性：月薪；
   HourlyEmployee ：ColaEmployee 的子类，按小时拿工资的员工，每月工作超出160 小时的部分按照1.5 倍工资发放。属性：每小时的工资、每月工作的小时数；
   SalesEmployee ：ColaEmployee 的子类，销售人员，工资由月销售额和提成率决定。属性：月销售额、提成率；
       定义一个类Company，在该类中写一个方法，调用该方法可以打印出某月某个员工的工资数额，写一个测试类TestCompany,在main方法，
       把若干各种类型的员工放在一个ColaEmployee 数组里，并单元出数组中每个员工当月的工资；
3、之前没完成的八位数卡号 题目  去完成 同学之前多沟通
4、把今天做的重写equals  toString 回去再敲两遍深刻理解  这个作业是重点 重点在于 理解知识点   继承 多态
*/
   /**
    * 1、创建对象的过程到底是怎样的  ：其实就是在调用 构造函数的过程
      Animal  animal=new Animal();
            其实   创建对象 就是一个在调用类的构造函数（特殊的方法）的过程
     2、构造函数是什么？
     3、构造函数的作用是什么？ 就是在   创建对象的时候使用调用构造函数  
       每一个 类都拥有自己的构造函数   
     4、构造函数写法 ：  方法名与 类名完全一致（大小写敏感）   方法一定不能写返回值  
             一般情况下  我们创建好的每一个类当中 都默认  含有一个无参数（没有入参）的构造函数；
             当自行书写一个有参数构造函数 或者是  自己行编写 一个无参数 构造函数的时候  此时后来写的构造函数会覆盖之前默认的那个无参构造函数
     
     
     5、类一大堆具有共同特征对象的集合宏观概念  
                  对象是类的一个具体化实例
     6、一个类在理论上可以创建无数个对象       反过来 一个 对象 能否归于多个类呢？（后续我们讲继承的时候 涉及）】
     7、游离块   静态游离块
                 什么是 游离块 ：{里面可以书写   独立的业务逻辑功能模块}
                 什么时候会执行这个游离块：游离块在每次执行 构造函数之前都会先执行游离块 里的代码
                 什么是静态游离块：  static{}
                 什么时候会执行这个静态游离块  以及    该静态游离块会被执行几次
                会在  主函数（也就是main函数之前优先执行这个 静态游离块      》main函数》 游离块》构造函数）
                 静态游离块优先执行 且只执行一次
      8、Java面向对象 三大特征： 封装 继承 多态
      9、封装 ：什么是封装    封装是针对于类属性而言的  进行的保护操作   封装的步骤 ：
        1.属性的私有化（使用private修饰属性）2.生成公有的get  set方法
    
      10、继承：
      1.概念:从现实生活角度出发 我们的  生活中处处存在 类与类之间的 包含关系  ，在这其中 我们把这种包含关系 抽象出来称为 我们java 中的继承
      2.如何去书写两个存在继承关系的类  这个地方需要使用到我们的extends 关键字
      3.存在继承关系的两个类之间  子类继承父类之后  子类中就相当于含有了父类之前写的方法与属性（不考虑权限修饰符）
      4.在实现继承关系的子类中 如果  创建子类对象则 先去执行父类的构造函数 再去执行子类构造函数（构造器）
      5.一个类作为父类 可以有多个子类  一个类能且只能最多继承一个父类
      6.继承具有传递性   也就是说当  父类被继承   子类  再次作为父类被别的类继承后  之前    的爷爷类 的方法  在孙子辈 类当中 也是具有继承性的
                    继承具有传递性
      11、方法的重写（override）：
                   子类继承父类   ：子类具有了 父类中的方法
                   如果在子类中重新书写这个方法 我们管这个过程称之为  方法的重写
                   实现方法的重写后  子类中再去调用重写后方法默认调用的是重写后的方法
                   重写一定是 发生在  类与类之间存在继承关系的基础上，、
                   重写发生的意义：之前父类的方法  业务 不足以 支撑 当前子类的业务逻辑需求  重写可以弥补这一点
        
        方法的重载(overload)：
                   方法的重载 是发生在一个类当中 ，方法的名称相同  方法的入参不同（入参个数，入参类型，入参类型顺序）
                  为什么要有方法的重载：
                  
       12、我们Java的所有的类 都有一个共同的父类  这个父类叫做 Object类     
	}
}
*/	
}
