package com.neusoft;

public class LearnAbstract {
/*
1、Abstract: 抽象的   
abstract关键字：抽象的     
abstract关键字 可以用来修饰  类  或者方法  
abstract 修饰后的类 叫做 抽象类  abstract修饰后的方法称之为 抽象方法
2、抽象类：
   抽象类的定义     权限修饰符  的后面  class的前面  加入  abstract关键字
   抽象类  跟其他的非抽象类 相比 有什么区别
    1.不能够 想其他类一样通过new去创建实例化对象
    2.抽象类 是可以书写构造函数的
    3.可以在抽象类中创建抽象方法:多了abstract关键字   少了方法体   多了个 分号
    4.一个非抽象类去继承抽象类 如果抽象类中含有抽象方法 则  继承他的 非抽象类 一定要去重写之前的抽象方法
    5.一个抽象类 继承一个抽象类 是否必须要重写其中抽象方法？不是的
    6.抽象类中既可以写抽象方法 也可以写非抽象方法    非抽象类中只能写 非抽象方法
3、抽象类 存在的意义？
      就是用来被继承的    在项目需求不确定阶段 擅长使用 抽象类 抽象方法  可以在一定程度上避免  代码研发过剩 以及 后期代码扩展 罗嗦的  现象
      
 4、接口 ：interface
    首先 接口不是类   接口就是接口
    如何去创建一个接口  new  create new  interface
  interface 与 类之间的区别：
  1.interface不是类 不可能被实例化  
  2.interface中  不存在  具体方法  只存在抽象方法 与常量
  3.interface与类之间的关系     ：类只能去 实现（implements）接口  不能去继承接口,接口与类之间的关系 只能是接口被实现的关系
     一个类能否实现多个接口？ 一个类可以去实现多个接口
  4.接口与接口之间的关系？接口与接口之间存在着 继承关系 并且可以 实现 多继承
  接口无构造函数
  实现
  5、interface存在的意义？接口不是一个类  约束面向对象的规则 在接口这个地方   
           类的约束性：只能实现但继承
           接口的灵活度要高一些 
  6、抽象类跟接口相比 区别是？
    1. 抽象类中还是可以写  非抽象方法的  但是接口 只能写抽象方法
    2. 抽象类中存在构造函数  接口没有构造函数概念
    3. 抽象类中可以定义属性 然而接口不能 接口只能定义常量(一般情况下  在接口当中 定义常量的时候 要配合  static一起使用)
  7、什么是常量 不可以更改的 数据
     如何定义一个常量 ：  final（最终的 不变的 ）  
    final int  a=0；
    常量的定义：在定义类型的前面加上final关键字进行修饰
  
  8、
  static ：静态的    使用static 修饰后的 方法以及 全局变量  就是 为 类自己本身的 可以直接以类名点的形式 调用
  static方法与非静态方法 之间能否直接互相调用
     非静态方法能使用静态方法，静态方法 不能使用非静态方法
     在静态方法中 既不能使用非静态的方法也不能使用非静态的变量
*/
}
