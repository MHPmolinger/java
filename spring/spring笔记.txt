springMVC开发环境的搭建：
1.新建项目
2.导入jar包
3.在web.xml中配置springMVC框架的前端控制器，作用：把所有请求交给springMVC处理，同时配置初始化参数
<servlet>
	<servlet-name>x</servlet-name>
	<servlet-class>org.springframework.web.mvc.servlet.dispatcherservlet</servlet-class>
	<init-param>
		<param-name>contextconfiglocation</param-name>
		<param-value>classpath:o.xml</param-value>
	</init-param>
</servlet>
<servlet-mapping>
	<servlet-name>x</servlet-name>
	<url-pattern>/</init-param>
</servlet-mapping>
4.配置springMVC的配置文件o.xml
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	开启类扫描的注释解析器，作用：扫描类上的注释	
	<context:component-scan base-package="x.x.x"/>
	配置视图解析器，作用：把处理器返回的逻辑视图转换为物理视图
	<bean class="org.springframework.web.servlet.view.internalresourceviewresolver">
		<property name="prefix" value="/web-inf/"/>
		<property name="suffix" value=".jsp"/>
	</bean>
	配置自定义的处理器
	<bean name="/xxx" class="x.x.x"/>
	配置映射器
	<bean class="org.springframework.web.servlet.handler.beannameurlhandlermapping"></bean>
	配置适配器
	<bean class="org.springframework.web.servlet.mvc.simplecontrollerhandleradapter"></bean>
</bean>
5.创建handler处理器：在类上使用@controller，并使用@requestmapping（"/xxx"）
6.创建测试页面
<a herf="${pagecontext.request.contextpath}/web-inf/x">test</a>
---------------------------------------------------------------------------------------------------
处理器映射器与适配器的使用总结：

注解的方式（@controller）
<mvc:annotation-driven/>替代下面的配置
<bean class="org.springframework.web.servlet.mvc.method.annotation.requestmappinghandlermapping"/>
<bean class="org.springframework.web.servlet.mvc.method.annotation.requestmappinghandleradapter"/>

xml的方式
一、实现controller接口,
	适配器为<bean class="org.springframework.web.servlet.mvc.simplecontrollerhandleradapter">
	1，映射器以bean的name属性作为映射地址<bean name="/path" class="usercontroller">，
	则处理器为<bean class="org.sprngframework.web.servlet.handler.beannameurlhandlermapping"/>

	2.映射器以bean的id属性为映射地址<bean id="usercontroller" class="usercontroller"/>
	则处理器为<bean class="org.springframework.web.servlet.handler.simpleurlhandlermapping">
			<property name="">
				<prop key="/path1">usercontroller</prop>
			</property>
		   </bean>

二、实现httprequesthandler接口，
	适配器为<bean class="org.springframework.web.servlet.mvc.httprequesthandleradapter"/>
	映射器  若为ID 则为 simpleurlhandlermapping
		若为name 则为 beannameurlhandlermapping


@requestmapping :可以加在类上，也可以加在方法上，用来映射请求路径
@autowired :加在方法，也可以加在属性上，表示按照类型进行注入
@component:加在类上标注一个组件，其value属性默认为类名的首字母小写，作用同bean标签的id属性的值，<bean id="user" class="xx"/>
处理器的返回值类型：
	字符串：forWord：表示转发
		redirect:表示重定向
	modelandview：
	void：
-------------------------------------------------------------------------------------------------------------
自定义框架
1.自定义视图：定义一个自定义类，实现view接口，并用注解标注为组件@component（"myView"）	
getcontenttype():设置视图的内容类型 text/html
render():
2.自定义处理器：
3.配置springMVC文件：
开启类扫描的注解解析器：<context:component-scan base-package="xxx"/>
开启基于注解的映射器与适配器：<mvc:annotation-driven/>
配置视图解析器：<bean class="org.springframework.web.servlet.view.beannameviewresolver">
			<property name="order" value="100"></property>
		 </bean>
4.测试
-------------------------------------------------------------------------------------------------
配置不经处理器直接视图
配置spring.mvc文件：	path:设置对外访问路径		<mvc:view-controller path="/view1" view-name="test1"/>
--------------------------------------------------------------------------------------------------------
自定义拦截器
1.自定义类，实现handlerinterceptor接口
prehandle():返回true才继续执行
posthandler():执行目标方法后执行
aftercompletion():渲染视图后执行
2.在springMVC.xml文件配置拦截路径：
<mvc:interceptors>
	<mvc:interceptor>
		<mvc:mapping path="/email/**"/>
		<bean class="x.x"></bean>
	</mvc:interceptor>
</mvc:interceptors>
-----------------------------------------------------------------------------------------
	@DateTimeFormat用来格式化日期的
	@DateTimeFormat(pattern="yyyy-MM-dd")
	private Date birthday;
	@NumberFormat用来格式化数字的
	@NumberFormat(pattern="#,###.##")
	private Double salary;
----------------------------------------------------------------------------------
文件上传的配置
<bean id="multipartresolver" class="org.springframework.web.multipart.commons.commonsmultipartresolver">
	<property name="maxuploadsize" value="10487600"/>
	<property name="defaultencoding" value="utf-8"/>
</bean>